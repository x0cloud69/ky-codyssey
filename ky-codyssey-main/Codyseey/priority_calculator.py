""" 
✅ 2. 복잡한 사칙연산 프로그램 구현하기 - **priority_calculator.py**
문제 3번에서 만들어진 **calculator.py 를 개선한다.**
입력된 문자열의 사칙연산(+,-,*,/) 우선순위를 고려하여 계산하는 프로그램을 작성한다.
괄호((, ))는 처리하지 않는다.
사칙연산의 일반적인 우선순위(,/ > +,-)를 적용하여 정확히 계산한다.

📌 기능 요구사항
입력 예시
4 + 5 * 3 - 2
사칙연산 우선순위에 따라 계산하여 올바른 결과 출력

예외 처리
0으로 나누는 경우 "Error: Division by zero." 출력
잘못된 입력 형식 시 "Invalid input." 출력
출력 예시

Result: 17.0
🧱 구현 방식 및 기술 요구사항
입력 문자열은 터미널에서 input()으로 입력받는다.
문자열을 공백 기준으로 나누어(split()) 처리한다.
기존 문제 3번 calculator.py의 연산 함수(add, subtract, multiply, divide)를 반드시 재사용한다.
Python 내장 함수 eval() 사용을 금지한다.
다음의 형식을 반드시 따른다.
if __name__ == "__main__":
    main()
개발환경	
개발환경
Visual Studio Code만을 사용해서 코드 편집 및 실행한다.
Git에서 기본 제공되는 명령어로 터미널에서 실행하며 별도의 도구를 사용하지 않는다.
커밋 명령어 사용시 에디터 없이 명령어로만 메시지를 입력한다.
revert 명령어를 사용해서 되돌리기 한다.
제약조건	
제약사항
Visual Studio Code만을 사용해서 코드 편집 및 실행한다.
Git에서 기본 제공되는 명령어로 터미널에서 실행하며 별도의 도구를 사용하지 않는다.
커밋 명령어 사용시 에디터 없이 명령어로만 메시지를 입력한다.
revert 명령어를 사용해서 되돌리기 한다.
보너스 과제
reset과 revert의 차이점과 협업시 revert를 추천하는 이유를 Markdown 문서로 제출한다.

문서의 이름은 reset_vs_revert.md로 저장해서 제출한다.

문자열의 사칙연산(+,-,*,/) 우선순위에 더하여 괄호(**(**, **)**)의 우선순위를 정확히 고려하여 계산하는 프로그램을 작성한다.

예를 들어, 다음과 같은 입력이 있을 때:

( 4 + 5 ) * ( 3 - 2 )
프로그램은 괄호 및 연산자의 우선순위를 적용하여 정확한 결과를 출력해야 한다.

Result: 9.0 """